name: Run BFH Rooms Sync

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 6,11,16 * 3-10 1-6'
  #   - cron: '0 7,12,17 * 11-12 1-6'
  #   - cron: '0 7,12,17 * 1-2 1-6'

permissions:
  contents: read

concurrency:
  group: rooms_sync_google
  cancel-in-progress: false

jobs:
  run:
    runs-on: self-hosted
    timeout-minutes: 45
    env:
      TZ: Europe/Zurich
      PYTHONUNBUFFERED: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install deps (pip + Playwright Chromium)
        shell: bash
        run: |
          set -euxo pipefail
          pip install -r requirements.txt
          python -m playwright install --with-deps chromium

      - name: Write storage_state.json from secret
        shell: bash
        run: |
          set -euo pipefail
          # Secret: PLAYWRIGHT_AUTH_STATE (mehrzeilig erlaubt)
          install -m 600 /dev/null storage_state.json
          cat > storage_state.json <<'JSON'
          ${{ secrets.PLAYWRIGHT_AUTH_STATE }}
          JSON
          # Sanity-Checks
          test -s storage_state.json || { echo "❌ storage_state.json ist leer – Secret prüfen."; exit 2; }
          if command -v jq >/dev/null 2>&1; then
            jq -e . storage_state.json >/dev/null 2>&1 || { echo "❌ Ungültiges JSON im Secret."; exit 3; }
          else
            echo "⚠️ jq nicht installiert – JSON wird nicht geprüft."
          fi
          # Muss die 3vrooms-Domain enthalten
          grep -q '"domain": "bfh.book.3vrooms.app"' storage_state.json || { echo "❌ 3vrooms-Cookies fehlen (bfh.book.3vrooms.app)."; exit 4; }

      - name: Check storage_state.json presence (no content)
        shell: bash
        run: |
          set -euo pipefail
          ls -lah .
          # Ausgabe von Grösse und Hash ohne Inhalt zu leaken
          if command -v stat >/dev/null 2>&1; then
            echo "Size (bytes): $(stat -c%s storage_state.json 2>/dev/null || stat -f%z storage_state.json)"
          fi
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum storage_state.json
          elif command -v shasum >/dev/null 2>&1; then
            shasum -a 256 storage_state.json
          else
            echo "⚠️ Kein SHA256-Tool verfügbar."
          fi
          echo "✅ storage_state.json vorhanden."

      - name: Run sync with retries (headless)
        shell: bash
        env:
          ROOMS_NAV_TIMEOUT_MS: "180000"
          ROOMS_GOTO_TIMEOUT_MS: "180000"
        run: |
          set -euo pipefail
          mkdir -p artifacts_sync
          attempts=(1 2 3)
          delays=(10 30 60)
          rc=0
          for i in "${!attempts[@]}"; do
            echo "=== Versuch ${attempts[$i]} von ${#attempts[@]} ==="
            if python rooms_sync_google.py \
              --storage-state storage_state.json \
              --calendar "Rooms_BFH_Kilchenmann" \
              --split-by standort \
              --timeout 240000 \
              --headless
            then
              echo "Run erfolgreich."
              rc=0
              break
            else
              rc=$?
              echo "Run fehlgeschlagen (Exit $rc)."
              if [ "$i" -lt "$(( ${#attempts[@]} - 1 ))" ]; then
                echo "Warte ${delays[$i]}s und versuche erneut…"
                sleep "${delays[$i]}"
              else
                echo "Alle Versuche fehlgeschlagen."
              fi
            fi
          done
          exit "$rc"

      - name: Upload artifacts for debugging (ohne Secrets)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rooms-artifacts
          path: |
            artifacts_sync/**
            **/playwright-report/**
            **/trace.zip
          if-no-files-found: ignore
          compression-level: 6
          retention-days: 7

      - name: Securely delete storage_state.json
        if: always()
        shell: bash
        run: |
          # Datei sicher entfernen (auf Self-Hosted Runnern sinnvoll)
          shred -u -z -n 3 storage_state.json || rm -f storage_state.json
